/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface DsAvatar {
        /**
          * Texto alternativo para a imagem
         */
        "alt"?: string;
        /**
          * Texto do badge
         */
        "badge"?: string;
        /**
          * Posição do badge
          * @default 'bottom-right'
         */
        "badgePosition": 'top-right' | 'bottom-right';
        /**
          * Iniciais customizadas (sobrescreve geração automática)
         */
        "initials"?: string;
        /**
          * Nome para gerar iniciais automaticamente
         */
        "name"?: string;
        /**
          * Forma do avatar
          * @default 'circle'
         */
        "shape": 'circle' | 'square';
        /**
          * Tamanho do avatar
          * @default 'md'
         */
        "size": 'xs' | 'sm' | 'md' | 'lg' | 'xl';
        /**
          * URL da imagem do avatar
         */
        "src"?: string;
        /**
          * Status do usuário
         */
        "status"?: 'online' | 'offline' | 'away' | 'busy';
    }
    interface DsButton {
        /**
          * If true, the button is disabled
          * @default false
         */
        "disabled": boolean;
        /**
          * The button type (button, submit, reset)
          * @default 'button'
         */
        "type": 'button' | 'submit' | 'reset';
        /**
          * The button variant
          * @default 'primary'
         */
        "variant": 'primary' | 'secondary' | 'tertiary';
    }
    interface DsCheckbox {
        /**
          * Alternative text for accessibility when no visible label is present
          * @default ''
         */
        "ariaLabel": string;
        /**
          * The checkbox checked state
          * @default false
         */
        "checked": boolean;
        /**
          * If true, the checkbox is disabled
          * @default false
         */
        "disabled": boolean;
        /**
          * If true, the checkbox is in indeterminate state
          * @default false
         */
        "indeterminate": boolean;
        /**
          * The checkbox label text
          * @default ''
         */
        "label": string;
        /**
          * The checkbox name for grouping
          * @default ''
         */
        "name": string;
        /**
          * If true, the checkbox is required
          * @default false
         */
        "required": boolean;
        /**
          * The checkbox value for forms
          * @default ''
         */
        "value": string;
    }
    interface DsCheckboxGroup {
        /**
          * If true, the group is disabled
          * @default false
         */
        "disabled": boolean;
        /**
          * Error message
          * @default ''
         */
        "errorText": string;
        /**
          * Help text
          * @default ''
         */
        "helpText": string;
        /**
          * Label for the group
          * @default ''
         */
        "label": string;
        /**
          * Name for all checkboxes in the group
          * @default ''
         */
        "name": string;
        /**
          * Layout orientation
          * @default 'vertical'
         */
        "orientation": 'vertical' | 'horizontal';
        /**
          * If true, at least one checkbox is required
          * @default false
         */
        "required": boolean;
    }
    interface DsDropdown {
        /**
          * Se o dropdown está desabilitado
          * @default false
         */
        "disabled": boolean;
        /**
          * Texto de erro
         */
        "errorText"?: string;
        /**
          * Texto de ajuda
         */
        "helpText"?: string;
        /**
          * Label do dropdown
         */
        "label"?: string;
        /**
          * Limite de itens visíveis
          * @default 9
         */
        "maxItems": number;
        /**
          * Se permite seleção múltipla
          * @default false
         */
        "multiple": boolean;
        /**
          * Nome do campo
          * @default ''
         */
        "name": string;
        /**
          * Placeholder do dropdown
         */
        "placeholder"?: string;
        /**
          * Se o dropdown é obrigatório
          * @default false
         */
        "required": boolean;
        /**
          * Se permite busca/filtro
          * @default false
         */
        "searchable": boolean;
        /**
          * Valor selecionado
          * @default ''
         */
        "value": string | string[];
        /**
          * Variação do dropdown
          * @default 'noarrow'
         */
        "variant": 'noarrow' | 'top' | 'bottom';
    }
    interface DsDropdownItem {
        /**
          * Alinhamento horizontal da seta
          * @default 'left'
         */
        "arrowAlign": 'left' | 'middle' | 'right';
        /**
          * Caminho personalizado para o SVG da seta para baixo Se não fornecido, usa o valor padrão da configuração de assets
         */
        "arrowDownPath"?: string;
        /**
          * Caminho personalizado para o SVG da seta para cima Se não fornecido, usa o valor padrão da configuração de assets
         */
        "arrowUpPath"?: string;
        /**
          * Posição da seta
          * @default 'noarrow'
         */
        "position": 'top' | 'bottom' | 'noarrow';
    }
    interface DsInput {
        /**
          * Autocomplete attribute
         */
        "autocomplete"?: string;
        /**
          * If true, the input is disabled
          * @default false
         */
        "disabled": boolean;
        /**
          * Error message
          * @default ''
         */
        "errorText": string;
        /**
          * Help text
          * @default ''
         */
        "helpText": string;
        /**
          * Label text
          * @default ''
         */
        "label": string;
        /**
          * Maximum length
         */
        "maxlength"?: number;
        /**
          * Minimum length
         */
        "minlength"?: number;
        /**
          * The input name
          * @default ''
         */
        "name": string;
        /**
          * Pattern for validation
         */
        "pattern"?: string;
        /**
          * Placeholder text
          * @default ''
         */
        "placeholder": string;
        /**
          * If true, the input is readonly
          * @default false
         */
        "readonly": boolean;
        /**
          * If true, the input is required
          * @default false
         */
        "required": boolean;
        /**
          * The input size
          * @default 'md'
         */
        "size": 'sm' | 'md' | 'lg';
        /**
          * The input type
          * @default 'text'
         */
        "type": 'text' | 'email' | 'password' | 'number' | 'tel' | 'url' | 'search';
        /**
          * The input value
          * @default ''
         */
        "value": string;
    }
    interface DsMenuItem {
        /**
          * Estado desabilitado do item
          * @default false
         */
        "disabled": boolean;
        /**
          * Índice do item na lista
          * @default 0
         */
        "index": number;
        /**
          * Estado de seleção do item
          * @default false
         */
        "selected": boolean;
        /**
          * Valor do item
         */
        "value": any;
    }
    interface DsMenuItemContent {
        /**
          * Variação do conteúdo
          * @default 'single'
         */
        "content": 'single' | 'double' | 'triple' | 'single-divider';
        /**
          * Texto principal do item
          * @default ''
         */
        "itemTitle": string;
        /**
          * Texto acima do título
         */
        "overline"?: string;
        /**
          * Texto secundário do item
         */
        "subtitle"?: string;
    }
    interface DsRadioGroup {
        /**
          * If true, the group is disabled
          * @default false
         */
        "disabled": boolean;
        /**
          * Error message
          * @default ''
         */
        "errorText": string;
        /**
          * Help text
          * @default ''
         */
        "helpText": string;
        /**
          * Label for the group
          * @default ''
         */
        "label": string;
        /**
          * Name for all radios in the group
          * @default ''
         */
        "name": string;
        /**
          * Layout orientation
          * @default 'vertical'
         */
        "orientation": 'vertical' | 'horizontal';
        /**
          * If true, selection is required
          * @default false
         */
        "required": boolean;
    }
    interface DsSelect {
        /**
          * If true, the select is disabled
          * @default false
         */
        "disabled": boolean;
        /**
          * Error message
          * @default ''
         */
        "errorText": string;
        /**
          * Help text
          * @default ''
         */
        "helpText": string;
        /**
          * Label text
          * @default ''
         */
        "label": string;
        /**
          * If true, allows multiple selections
          * @default false
         */
        "multiple": boolean;
        /**
          * The select name
          * @default ''
         */
        "name": string;
        /**
          * Placeholder option text
          * @default ''
         */
        "placeholder": string;
        /**
          * If true, the select is required
          * @default false
         */
        "required": boolean;
        /**
          * The select value
          * @default ''
         */
        "value": string;
    }
    interface DsTextarea {
        /**
          * If true, auto-resize based on content
          * @default false
         */
        "autoResize": boolean;
        /**
          * Number of columns
         */
        "cols"?: number;
        /**
          * If true, the textarea is disabled
          * @default false
         */
        "disabled": boolean;
        /**
          * Error message
          * @default ''
         */
        "errorText": string;
        /**
          * Help text
          * @default ''
         */
        "helpText": string;
        /**
          * Label text
          * @default ''
         */
        "label": string;
        /**
          * Maximum length
         */
        "maxlength"?: number;
        /**
          * Minimum length
         */
        "minlength"?: number;
        /**
          * The textarea name
          * @default ''
         */
        "name": string;
        /**
          * Placeholder text
          * @default ''
         */
        "placeholder": string;
        /**
          * If true, the textarea is readonly
          * @default false
         */
        "readonly": boolean;
        /**
          * If true, the textarea is required
          * @default false
         */
        "required": boolean;
        /**
          * Number of rows
          * @default 3
         */
        "rows": number;
        /**
          * If true, show character counter
          * @default false
         */
        "showCounter": boolean;
        /**
          * The textarea value
          * @default ''
         */
        "value": string;
    }
}
export interface DsCheckboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDsCheckboxElement;
}
export interface DsCheckboxGroupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDsCheckboxGroupElement;
}
export interface DsDropdownCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDsDropdownElement;
}
export interface DsInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDsInputElement;
}
export interface DsMenuItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDsMenuItemElement;
}
export interface DsRadioGroupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDsRadioGroupElement;
}
export interface DsSelectCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDsSelectElement;
}
export interface DsTextareaCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDsTextareaElement;
}
declare global {
    interface HTMLDsAvatarElement extends Components.DsAvatar, HTMLStencilElement {
    }
    var HTMLDsAvatarElement: {
        prototype: HTMLDsAvatarElement;
        new (): HTMLDsAvatarElement;
    };
    interface HTMLDsButtonElement extends Components.DsButton, HTMLStencilElement {
    }
    var HTMLDsButtonElement: {
        prototype: HTMLDsButtonElement;
        new (): HTMLDsButtonElement;
    };
    interface HTMLDsCheckboxElementEventMap {
        "dsChange": boolean;
        "dsFocus": void;
        "dsBlur": void;
    }
    interface HTMLDsCheckboxElement extends Components.DsCheckbox, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDsCheckboxElementEventMap>(type: K, listener: (this: HTMLDsCheckboxElement, ev: DsCheckboxCustomEvent<HTMLDsCheckboxElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDsCheckboxElementEventMap>(type: K, listener: (this: HTMLDsCheckboxElement, ev: DsCheckboxCustomEvent<HTMLDsCheckboxElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDsCheckboxElement: {
        prototype: HTMLDsCheckboxElement;
        new (): HTMLDsCheckboxElement;
    };
    interface HTMLDsCheckboxGroupElementEventMap {
        "dsChange": string[];
    }
    interface HTMLDsCheckboxGroupElement extends Components.DsCheckboxGroup, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDsCheckboxGroupElementEventMap>(type: K, listener: (this: HTMLDsCheckboxGroupElement, ev: DsCheckboxGroupCustomEvent<HTMLDsCheckboxGroupElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDsCheckboxGroupElementEventMap>(type: K, listener: (this: HTMLDsCheckboxGroupElement, ev: DsCheckboxGroupCustomEvent<HTMLDsCheckboxGroupElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDsCheckboxGroupElement: {
        prototype: HTMLDsCheckboxGroupElement;
        new (): HTMLDsCheckboxGroupElement;
    };
    interface HTMLDsDropdownElementEventMap {
        "dsChange": any;
        "dsFocus": void;
        "dsBlur": void;
        "dsOpen": void;
        "dsClose": void;
    }
    interface HTMLDsDropdownElement extends Components.DsDropdown, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDsDropdownElementEventMap>(type: K, listener: (this: HTMLDsDropdownElement, ev: DsDropdownCustomEvent<HTMLDsDropdownElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDsDropdownElementEventMap>(type: K, listener: (this: HTMLDsDropdownElement, ev: DsDropdownCustomEvent<HTMLDsDropdownElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDsDropdownElement: {
        prototype: HTMLDsDropdownElement;
        new (): HTMLDsDropdownElement;
    };
    interface HTMLDsDropdownItemElement extends Components.DsDropdownItem, HTMLStencilElement {
    }
    var HTMLDsDropdownItemElement: {
        prototype: HTMLDsDropdownItemElement;
        new (): HTMLDsDropdownItemElement;
    };
    interface HTMLDsInputElementEventMap {
        "dsInput": string;
        "dsChange": string;
        "dsFocus": void;
        "dsBlur": void;
    }
    interface HTMLDsInputElement extends Components.DsInput, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDsInputElementEventMap>(type: K, listener: (this: HTMLDsInputElement, ev: DsInputCustomEvent<HTMLDsInputElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDsInputElementEventMap>(type: K, listener: (this: HTMLDsInputElement, ev: DsInputCustomEvent<HTMLDsInputElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDsInputElement: {
        prototype: HTMLDsInputElement;
        new (): HTMLDsInputElement;
    };
    interface HTMLDsMenuItemElementEventMap {
        "dsSelect": any;
    }
    interface HTMLDsMenuItemElement extends Components.DsMenuItem, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDsMenuItemElementEventMap>(type: K, listener: (this: HTMLDsMenuItemElement, ev: DsMenuItemCustomEvent<HTMLDsMenuItemElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDsMenuItemElementEventMap>(type: K, listener: (this: HTMLDsMenuItemElement, ev: DsMenuItemCustomEvent<HTMLDsMenuItemElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDsMenuItemElement: {
        prototype: HTMLDsMenuItemElement;
        new (): HTMLDsMenuItemElement;
    };
    interface HTMLDsMenuItemContentElement extends Components.DsMenuItemContent, HTMLStencilElement {
    }
    var HTMLDsMenuItemContentElement: {
        prototype: HTMLDsMenuItemContentElement;
        new (): HTMLDsMenuItemContentElement;
    };
    interface HTMLDsRadioGroupElementEventMap {
        "dsChange": string;
    }
    interface HTMLDsRadioGroupElement extends Components.DsRadioGroup, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDsRadioGroupElementEventMap>(type: K, listener: (this: HTMLDsRadioGroupElement, ev: DsRadioGroupCustomEvent<HTMLDsRadioGroupElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDsRadioGroupElementEventMap>(type: K, listener: (this: HTMLDsRadioGroupElement, ev: DsRadioGroupCustomEvent<HTMLDsRadioGroupElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDsRadioGroupElement: {
        prototype: HTMLDsRadioGroupElement;
        new (): HTMLDsRadioGroupElement;
    };
    interface HTMLDsSelectElementEventMap {
        "dsChange": string;
        "dsFocus": void;
        "dsBlur": void;
    }
    interface HTMLDsSelectElement extends Components.DsSelect, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDsSelectElementEventMap>(type: K, listener: (this: HTMLDsSelectElement, ev: DsSelectCustomEvent<HTMLDsSelectElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDsSelectElementEventMap>(type: K, listener: (this: HTMLDsSelectElement, ev: DsSelectCustomEvent<HTMLDsSelectElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDsSelectElement: {
        prototype: HTMLDsSelectElement;
        new (): HTMLDsSelectElement;
    };
    interface HTMLDsTextareaElementEventMap {
        "dsInput": string;
        "dsChange": string;
        "dsFocus": void;
        "dsBlur": void;
    }
    interface HTMLDsTextareaElement extends Components.DsTextarea, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDsTextareaElementEventMap>(type: K, listener: (this: HTMLDsTextareaElement, ev: DsTextareaCustomEvent<HTMLDsTextareaElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDsTextareaElementEventMap>(type: K, listener: (this: HTMLDsTextareaElement, ev: DsTextareaCustomEvent<HTMLDsTextareaElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDsTextareaElement: {
        prototype: HTMLDsTextareaElement;
        new (): HTMLDsTextareaElement;
    };
    interface HTMLElementTagNameMap {
        "ds-avatar": HTMLDsAvatarElement;
        "ds-button": HTMLDsButtonElement;
        "ds-checkbox": HTMLDsCheckboxElement;
        "ds-checkbox-group": HTMLDsCheckboxGroupElement;
        "ds-dropdown": HTMLDsDropdownElement;
        "ds-dropdown-item": HTMLDsDropdownItemElement;
        "ds-input": HTMLDsInputElement;
        "ds-menu-item": HTMLDsMenuItemElement;
        "ds-menu-item-content": HTMLDsMenuItemContentElement;
        "ds-radio-group": HTMLDsRadioGroupElement;
        "ds-select": HTMLDsSelectElement;
        "ds-textarea": HTMLDsTextareaElement;
    }
}
declare namespace LocalJSX {
    interface DsAvatar {
        /**
          * Texto alternativo para a imagem
         */
        "alt"?: string;
        /**
          * Texto do badge
         */
        "badge"?: string;
        /**
          * Posição do badge
          * @default 'bottom-right'
         */
        "badgePosition"?: 'top-right' | 'bottom-right';
        /**
          * Iniciais customizadas (sobrescreve geração automática)
         */
        "initials"?: string;
        /**
          * Nome para gerar iniciais automaticamente
         */
        "name"?: string;
        /**
          * Forma do avatar
          * @default 'circle'
         */
        "shape"?: 'circle' | 'square';
        /**
          * Tamanho do avatar
          * @default 'md'
         */
        "size"?: 'xs' | 'sm' | 'md' | 'lg' | 'xl';
        /**
          * URL da imagem do avatar
         */
        "src"?: string;
        /**
          * Status do usuário
         */
        "status"?: 'online' | 'offline' | 'away' | 'busy';
    }
    interface DsButton {
        /**
          * If true, the button is disabled
          * @default false
         */
        "disabled"?: boolean;
        /**
          * The button type (button, submit, reset)
          * @default 'button'
         */
        "type"?: 'button' | 'submit' | 'reset';
        /**
          * The button variant
          * @default 'primary'
         */
        "variant"?: 'primary' | 'secondary' | 'tertiary';
    }
    interface DsCheckbox {
        /**
          * Alternative text for accessibility when no visible label is present
          * @default ''
         */
        "ariaLabel"?: string;
        /**
          * The checkbox checked state
          * @default false
         */
        "checked"?: boolean;
        /**
          * If true, the checkbox is disabled
          * @default false
         */
        "disabled"?: boolean;
        /**
          * If true, the checkbox is in indeterminate state
          * @default false
         */
        "indeterminate"?: boolean;
        /**
          * The checkbox label text
          * @default ''
         */
        "label"?: string;
        /**
          * The checkbox name for grouping
          * @default ''
         */
        "name"?: string;
        /**
          * Emitted when the checkbox loses focus
         */
        "onDsBlur"?: (event: DsCheckboxCustomEvent<void>) => void;
        /**
          * Emitted when the checkbox checked state changes
         */
        "onDsChange"?: (event: DsCheckboxCustomEvent<boolean>) => void;
        /**
          * Emitted when the checkbox gains focus
         */
        "onDsFocus"?: (event: DsCheckboxCustomEvent<void>) => void;
        /**
          * If true, the checkbox is required
          * @default false
         */
        "required"?: boolean;
        /**
          * The checkbox value for forms
          * @default ''
         */
        "value"?: string;
    }
    interface DsCheckboxGroup {
        /**
          * If true, the group is disabled
          * @default false
         */
        "disabled"?: boolean;
        /**
          * Error message
          * @default ''
         */
        "errorText"?: string;
        /**
          * Help text
          * @default ''
         */
        "helpText"?: string;
        /**
          * Label for the group
          * @default ''
         */
        "label"?: string;
        /**
          * Name for all checkboxes in the group
          * @default ''
         */
        "name"?: string;
        /**
          * Emitted when any checkbox in the group changes
         */
        "onDsChange"?: (event: DsCheckboxGroupCustomEvent<string[]>) => void;
        /**
          * Layout orientation
          * @default 'vertical'
         */
        "orientation"?: 'vertical' | 'horizontal';
        /**
          * If true, at least one checkbox is required
          * @default false
         */
        "required"?: boolean;
    }
    interface DsDropdown {
        /**
          * Se o dropdown está desabilitado
          * @default false
         */
        "disabled"?: boolean;
        /**
          * Texto de erro
         */
        "errorText"?: string;
        /**
          * Texto de ajuda
         */
        "helpText"?: string;
        /**
          * Label do dropdown
         */
        "label"?: string;
        /**
          * Limite de itens visíveis
          * @default 9
         */
        "maxItems"?: number;
        /**
          * Se permite seleção múltipla
          * @default false
         */
        "multiple"?: boolean;
        /**
          * Nome do campo
          * @default ''
         */
        "name"?: string;
        /**
          * Emitido quando o dropdown perde foco
         */
        "onDsBlur"?: (event: DsDropdownCustomEvent<void>) => void;
        /**
          * Emitido quando o valor muda
         */
        "onDsChange"?: (event: DsDropdownCustomEvent<any>) => void;
        /**
          * Emitido quando o dropdown fecha
         */
        "onDsClose"?: (event: DsDropdownCustomEvent<void>) => void;
        /**
          * Emitido quando o dropdown ganha foco
         */
        "onDsFocus"?: (event: DsDropdownCustomEvent<void>) => void;
        /**
          * Emitido quando o dropdown abre
         */
        "onDsOpen"?: (event: DsDropdownCustomEvent<void>) => void;
        /**
          * Placeholder do dropdown
         */
        "placeholder"?: string;
        /**
          * Se o dropdown é obrigatório
          * @default false
         */
        "required"?: boolean;
        /**
          * Se permite busca/filtro
          * @default false
         */
        "searchable"?: boolean;
        /**
          * Valor selecionado
          * @default ''
         */
        "value"?: string | string[];
        /**
          * Variação do dropdown
          * @default 'noarrow'
         */
        "variant"?: 'noarrow' | 'top' | 'bottom';
    }
    interface DsDropdownItem {
        /**
          * Alinhamento horizontal da seta
          * @default 'left'
         */
        "arrowAlign"?: 'left' | 'middle' | 'right';
        /**
          * Caminho personalizado para o SVG da seta para baixo Se não fornecido, usa o valor padrão da configuração de assets
         */
        "arrowDownPath"?: string;
        /**
          * Caminho personalizado para o SVG da seta para cima Se não fornecido, usa o valor padrão da configuração de assets
         */
        "arrowUpPath"?: string;
        /**
          * Posição da seta
          * @default 'noarrow'
         */
        "position"?: 'top' | 'bottom' | 'noarrow';
    }
    interface DsInput {
        /**
          * Autocomplete attribute
         */
        "autocomplete"?: string;
        /**
          * If true, the input is disabled
          * @default false
         */
        "disabled"?: boolean;
        /**
          * Error message
          * @default ''
         */
        "errorText"?: string;
        /**
          * Help text
          * @default ''
         */
        "helpText"?: string;
        /**
          * Label text
          * @default ''
         */
        "label"?: string;
        /**
          * Maximum length
         */
        "maxlength"?: number;
        /**
          * Minimum length
         */
        "minlength"?: number;
        /**
          * The input name
          * @default ''
         */
        "name"?: string;
        /**
          * Emitted when the input loses focus
         */
        "onDsBlur"?: (event: DsInputCustomEvent<void>) => void;
        /**
          * Emitted when the input value changes and loses focus
         */
        "onDsChange"?: (event: DsInputCustomEvent<string>) => void;
        /**
          * Emitted when the input gains focus
         */
        "onDsFocus"?: (event: DsInputCustomEvent<void>) => void;
        /**
          * Emitted when the input value changes
         */
        "onDsInput"?: (event: DsInputCustomEvent<string>) => void;
        /**
          * Pattern for validation
         */
        "pattern"?: string;
        /**
          * Placeholder text
          * @default ''
         */
        "placeholder"?: string;
        /**
          * If true, the input is readonly
          * @default false
         */
        "readonly"?: boolean;
        /**
          * If true, the input is required
          * @default false
         */
        "required"?: boolean;
        /**
          * The input size
          * @default 'md'
         */
        "size"?: 'sm' | 'md' | 'lg';
        /**
          * The input type
          * @default 'text'
         */
        "type"?: 'text' | 'email' | 'password' | 'number' | 'tel' | 'url' | 'search';
        /**
          * The input value
          * @default ''
         */
        "value"?: string;
    }
    interface DsMenuItem {
        /**
          * Estado desabilitado do item
          * @default false
         */
        "disabled"?: boolean;
        /**
          * Índice do item na lista
          * @default 0
         */
        "index"?: number;
        /**
          * Emitido quando o item é clicado/selecionado. O componente pai é responsável por gerenciar o estado de seleção. Payload: { value: any, index: number }
         */
        "onDsSelect"?: (event: DsMenuItemCustomEvent<any>) => void;
        /**
          * Estado de seleção do item
          * @default false
         */
        "selected"?: boolean;
        /**
          * Valor do item
         */
        "value"?: any;
    }
    interface DsMenuItemContent {
        /**
          * Variação do conteúdo
          * @default 'single'
         */
        "content"?: 'single' | 'double' | 'triple' | 'single-divider';
        /**
          * Texto principal do item
          * @default ''
         */
        "itemTitle"?: string;
        /**
          * Texto acima do título
         */
        "overline"?: string;
        /**
          * Texto secundário do item
         */
        "subtitle"?: string;
    }
    interface DsRadioGroup {
        /**
          * If true, the group is disabled
          * @default false
         */
        "disabled"?: boolean;
        /**
          * Error message
          * @default ''
         */
        "errorText"?: string;
        /**
          * Help text
          * @default ''
         */
        "helpText"?: string;
        /**
          * Label for the group
          * @default ''
         */
        "label"?: string;
        /**
          * Name for all radios in the group
          * @default ''
         */
        "name"?: string;
        /**
          * Emitted when selection changes
         */
        "onDsChange"?: (event: DsRadioGroupCustomEvent<string>) => void;
        /**
          * Layout orientation
          * @default 'vertical'
         */
        "orientation"?: 'vertical' | 'horizontal';
        /**
          * If true, selection is required
          * @default false
         */
        "required"?: boolean;
    }
    interface DsSelect {
        /**
          * If true, the select is disabled
          * @default false
         */
        "disabled"?: boolean;
        /**
          * Error message
          * @default ''
         */
        "errorText"?: string;
        /**
          * Help text
          * @default ''
         */
        "helpText"?: string;
        /**
          * Label text
          * @default ''
         */
        "label"?: string;
        /**
          * If true, allows multiple selections
          * @default false
         */
        "multiple"?: boolean;
        /**
          * The select name
          * @default ''
         */
        "name"?: string;
        /**
          * Emitted when the select loses focus
         */
        "onDsBlur"?: (event: DsSelectCustomEvent<void>) => void;
        /**
          * Emitted when the select value changes
         */
        "onDsChange"?: (event: DsSelectCustomEvent<string>) => void;
        /**
          * Emitted when the select gains focus
         */
        "onDsFocus"?: (event: DsSelectCustomEvent<void>) => void;
        /**
          * Placeholder option text
          * @default ''
         */
        "placeholder"?: string;
        /**
          * If true, the select is required
          * @default false
         */
        "required"?: boolean;
        /**
          * The select value
          * @default ''
         */
        "value"?: string;
    }
    interface DsTextarea {
        /**
          * If true, auto-resize based on content
          * @default false
         */
        "autoResize"?: boolean;
        /**
          * Number of columns
         */
        "cols"?: number;
        /**
          * If true, the textarea is disabled
          * @default false
         */
        "disabled"?: boolean;
        /**
          * Error message
          * @default ''
         */
        "errorText"?: string;
        /**
          * Help text
          * @default ''
         */
        "helpText"?: string;
        /**
          * Label text
          * @default ''
         */
        "label"?: string;
        /**
          * Maximum length
         */
        "maxlength"?: number;
        /**
          * Minimum length
         */
        "minlength"?: number;
        /**
          * The textarea name
          * @default ''
         */
        "name"?: string;
        /**
          * Emitted when the textarea loses focus
         */
        "onDsBlur"?: (event: DsTextareaCustomEvent<void>) => void;
        /**
          * Emitted when the textarea value changes and loses focus
         */
        "onDsChange"?: (event: DsTextareaCustomEvent<string>) => void;
        /**
          * Emitted when the textarea gains focus
         */
        "onDsFocus"?: (event: DsTextareaCustomEvent<void>) => void;
        /**
          * Emitted when the textarea value changes
         */
        "onDsInput"?: (event: DsTextareaCustomEvent<string>) => void;
        /**
          * Placeholder text
          * @default ''
         */
        "placeholder"?: string;
        /**
          * If true, the textarea is readonly
          * @default false
         */
        "readonly"?: boolean;
        /**
          * If true, the textarea is required
          * @default false
         */
        "required"?: boolean;
        /**
          * Number of rows
          * @default 3
         */
        "rows"?: number;
        /**
          * If true, show character counter
          * @default false
         */
        "showCounter"?: boolean;
        /**
          * The textarea value
          * @default ''
         */
        "value"?: string;
    }
    interface IntrinsicElements {
        "ds-avatar": DsAvatar;
        "ds-button": DsButton;
        "ds-checkbox": DsCheckbox;
        "ds-checkbox-group": DsCheckboxGroup;
        "ds-dropdown": DsDropdown;
        "ds-dropdown-item": DsDropdownItem;
        "ds-input": DsInput;
        "ds-menu-item": DsMenuItem;
        "ds-menu-item-content": DsMenuItemContent;
        "ds-radio-group": DsRadioGroup;
        "ds-select": DsSelect;
        "ds-textarea": DsTextarea;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "ds-avatar": LocalJSX.DsAvatar & JSXBase.HTMLAttributes<HTMLDsAvatarElement>;
            "ds-button": LocalJSX.DsButton & JSXBase.HTMLAttributes<HTMLDsButtonElement>;
            "ds-checkbox": LocalJSX.DsCheckbox & JSXBase.HTMLAttributes<HTMLDsCheckboxElement>;
            "ds-checkbox-group": LocalJSX.DsCheckboxGroup & JSXBase.HTMLAttributes<HTMLDsCheckboxGroupElement>;
            "ds-dropdown": LocalJSX.DsDropdown & JSXBase.HTMLAttributes<HTMLDsDropdownElement>;
            "ds-dropdown-item": LocalJSX.DsDropdownItem & JSXBase.HTMLAttributes<HTMLDsDropdownItemElement>;
            "ds-input": LocalJSX.DsInput & JSXBase.HTMLAttributes<HTMLDsInputElement>;
            "ds-menu-item": LocalJSX.DsMenuItem & JSXBase.HTMLAttributes<HTMLDsMenuItemElement>;
            "ds-menu-item-content": LocalJSX.DsMenuItemContent & JSXBase.HTMLAttributes<HTMLDsMenuItemContentElement>;
            "ds-radio-group": LocalJSX.DsRadioGroup & JSXBase.HTMLAttributes<HTMLDsRadioGroupElement>;
            "ds-select": LocalJSX.DsSelect & JSXBase.HTMLAttributes<HTMLDsSelectElement>;
            "ds-textarea": LocalJSX.DsTextarea & JSXBase.HTMLAttributes<HTMLDsTextareaElement>;
        }
    }
}
