/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface DsButton {
        /**
          * If true, the button is disabled
          * @default false
         */
        "disabled": boolean;
        /**
          * The button type (button, submit, reset)
          * @default 'button'
         */
        "type": 'button' | 'submit' | 'reset';
        /**
          * The button variant
          * @default 'primary'
         */
        "variant": 'primary' | 'secondary' | 'tertiary';
    }
    interface DsCheckboxGroup {
        /**
          * If true, the group is disabled
          * @default false
         */
        "disabled": boolean;
        /**
          * Error message
          * @default ''
         */
        "errorText": string;
        /**
          * Help text
          * @default ''
         */
        "helpText": string;
        /**
          * Label for the group
          * @default ''
         */
        "label": string;
        /**
          * Name for all checkboxes in the group
          * @default ''
         */
        "name": string;
        /**
          * Layout orientation
          * @default 'vertical'
         */
        "orientation": 'vertical' | 'horizontal';
        /**
          * If true, at least one checkbox is required
          * @default false
         */
        "required": boolean;
    }
    interface DsInput {
        /**
          * Autocomplete attribute
         */
        "autocomplete"?: string;
        /**
          * If true, the input is disabled
          * @default false
         */
        "disabled": boolean;
        /**
          * Error message
          * @default ''
         */
        "errorText": string;
        /**
          * Help text
          * @default ''
         */
        "helpText": string;
        /**
          * Label text
          * @default ''
         */
        "label": string;
        /**
          * Maximum length
         */
        "maxlength"?: number;
        /**
          * Minimum length
         */
        "minlength"?: number;
        /**
          * The input name
          * @default ''
         */
        "name": string;
        /**
          * Pattern for validation
         */
        "pattern"?: string;
        /**
          * Placeholder text
          * @default ''
         */
        "placeholder": string;
        /**
          * If true, the input is readonly
          * @default false
         */
        "readonly": boolean;
        /**
          * If true, the input is required
          * @default false
         */
        "required": boolean;
        /**
          * The input size
          * @default 'md'
         */
        "size": 'sm' | 'md' | 'lg';
        /**
          * The input type
          * @default 'text'
         */
        "type": 'text' | 'email' | 'password' | 'number' | 'tel' | 'url' | 'search';
        /**
          * The input value
          * @default ''
         */
        "value": string;
    }
    interface DsRadioGroup {
        /**
          * If true, the group is disabled
          * @default false
         */
        "disabled": boolean;
        /**
          * Error message
          * @default ''
         */
        "errorText": string;
        /**
          * Help text
          * @default ''
         */
        "helpText": string;
        /**
          * Label for the group
          * @default ''
         */
        "label": string;
        /**
          * Name for all radios in the group
          * @default ''
         */
        "name": string;
        /**
          * Layout orientation
          * @default 'vertical'
         */
        "orientation": 'vertical' | 'horizontal';
        /**
          * If true, selection is required
          * @default false
         */
        "required": boolean;
    }
    interface DsSelect {
        /**
          * If true, the select is disabled
          * @default false
         */
        "disabled": boolean;
        /**
          * Error message
          * @default ''
         */
        "errorText": string;
        /**
          * Help text
          * @default ''
         */
        "helpText": string;
        /**
          * Label text
          * @default ''
         */
        "label": string;
        /**
          * If true, allows multiple selections
          * @default false
         */
        "multiple": boolean;
        /**
          * The select name
          * @default ''
         */
        "name": string;
        /**
          * Placeholder option text
          * @default ''
         */
        "placeholder": string;
        /**
          * If true, the select is required
          * @default false
         */
        "required": boolean;
        /**
          * The select value
          * @default ''
         */
        "value": string;
    }
    interface DsTextarea {
        /**
          * If true, auto-resize based on content
          * @default false
         */
        "autoResize": boolean;
        /**
          * Number of columns
         */
        "cols"?: number;
        /**
          * If true, the textarea is disabled
          * @default false
         */
        "disabled": boolean;
        /**
          * Error message
          * @default ''
         */
        "errorText": string;
        /**
          * Help text
          * @default ''
         */
        "helpText": string;
        /**
          * Label text
          * @default ''
         */
        "label": string;
        /**
          * Maximum length
         */
        "maxlength"?: number;
        /**
          * Minimum length
         */
        "minlength"?: number;
        /**
          * The textarea name
          * @default ''
         */
        "name": string;
        /**
          * Placeholder text
          * @default ''
         */
        "placeholder": string;
        /**
          * If true, the textarea is readonly
          * @default false
         */
        "readonly": boolean;
        /**
          * If true, the textarea is required
          * @default false
         */
        "required": boolean;
        /**
          * Number of rows
          * @default 3
         */
        "rows": number;
        /**
          * If true, show character counter
          * @default false
         */
        "showCounter": boolean;
        /**
          * The textarea value
          * @default ''
         */
        "value": string;
    }
}
export interface DsCheckboxGroupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDsCheckboxGroupElement;
}
export interface DsInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDsInputElement;
}
export interface DsRadioGroupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDsRadioGroupElement;
}
export interface DsSelectCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDsSelectElement;
}
export interface DsTextareaCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDsTextareaElement;
}
declare global {
    interface HTMLDsButtonElement extends Components.DsButton, HTMLStencilElement {
    }
    var HTMLDsButtonElement: {
        prototype: HTMLDsButtonElement;
        new (): HTMLDsButtonElement;
    };
    interface HTMLDsCheckboxGroupElementEventMap {
        "dsChange": string[];
    }
    interface HTMLDsCheckboxGroupElement extends Components.DsCheckboxGroup, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDsCheckboxGroupElementEventMap>(type: K, listener: (this: HTMLDsCheckboxGroupElement, ev: DsCheckboxGroupCustomEvent<HTMLDsCheckboxGroupElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDsCheckboxGroupElementEventMap>(type: K, listener: (this: HTMLDsCheckboxGroupElement, ev: DsCheckboxGroupCustomEvent<HTMLDsCheckboxGroupElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDsCheckboxGroupElement: {
        prototype: HTMLDsCheckboxGroupElement;
        new (): HTMLDsCheckboxGroupElement;
    };
    interface HTMLDsInputElementEventMap {
        "dsInput": string;
        "dsChange": string;
        "dsFocus": void;
        "dsBlur": void;
    }
    interface HTMLDsInputElement extends Components.DsInput, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDsInputElementEventMap>(type: K, listener: (this: HTMLDsInputElement, ev: DsInputCustomEvent<HTMLDsInputElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDsInputElementEventMap>(type: K, listener: (this: HTMLDsInputElement, ev: DsInputCustomEvent<HTMLDsInputElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDsInputElement: {
        prototype: HTMLDsInputElement;
        new (): HTMLDsInputElement;
    };
    interface HTMLDsRadioGroupElementEventMap {
        "dsChange": string;
    }
    interface HTMLDsRadioGroupElement extends Components.DsRadioGroup, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDsRadioGroupElementEventMap>(type: K, listener: (this: HTMLDsRadioGroupElement, ev: DsRadioGroupCustomEvent<HTMLDsRadioGroupElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDsRadioGroupElementEventMap>(type: K, listener: (this: HTMLDsRadioGroupElement, ev: DsRadioGroupCustomEvent<HTMLDsRadioGroupElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDsRadioGroupElement: {
        prototype: HTMLDsRadioGroupElement;
        new (): HTMLDsRadioGroupElement;
    };
    interface HTMLDsSelectElementEventMap {
        "dsChange": string;
        "dsFocus": void;
        "dsBlur": void;
    }
    interface HTMLDsSelectElement extends Components.DsSelect, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDsSelectElementEventMap>(type: K, listener: (this: HTMLDsSelectElement, ev: DsSelectCustomEvent<HTMLDsSelectElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDsSelectElementEventMap>(type: K, listener: (this: HTMLDsSelectElement, ev: DsSelectCustomEvent<HTMLDsSelectElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDsSelectElement: {
        prototype: HTMLDsSelectElement;
        new (): HTMLDsSelectElement;
    };
    interface HTMLDsTextareaElementEventMap {
        "dsInput": string;
        "dsChange": string;
        "dsFocus": void;
        "dsBlur": void;
    }
    interface HTMLDsTextareaElement extends Components.DsTextarea, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDsTextareaElementEventMap>(type: K, listener: (this: HTMLDsTextareaElement, ev: DsTextareaCustomEvent<HTMLDsTextareaElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDsTextareaElementEventMap>(type: K, listener: (this: HTMLDsTextareaElement, ev: DsTextareaCustomEvent<HTMLDsTextareaElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDsTextareaElement: {
        prototype: HTMLDsTextareaElement;
        new (): HTMLDsTextareaElement;
    };
    interface HTMLElementTagNameMap {
        "ds-button": HTMLDsButtonElement;
        "ds-checkbox-group": HTMLDsCheckboxGroupElement;
        "ds-input": HTMLDsInputElement;
        "ds-radio-group": HTMLDsRadioGroupElement;
        "ds-select": HTMLDsSelectElement;
        "ds-textarea": HTMLDsTextareaElement;
    }
}
declare namespace LocalJSX {
    interface DsButton {
        /**
          * If true, the button is disabled
          * @default false
         */
        "disabled"?: boolean;
        /**
          * The button type (button, submit, reset)
          * @default 'button'
         */
        "type"?: 'button' | 'submit' | 'reset';
        /**
          * The button variant
          * @default 'primary'
         */
        "variant"?: 'primary' | 'secondary' | 'tertiary';
    }
    interface DsCheckboxGroup {
        /**
          * If true, the group is disabled
          * @default false
         */
        "disabled"?: boolean;
        /**
          * Error message
          * @default ''
         */
        "errorText"?: string;
        /**
          * Help text
          * @default ''
         */
        "helpText"?: string;
        /**
          * Label for the group
          * @default ''
         */
        "label"?: string;
        /**
          * Name for all checkboxes in the group
          * @default ''
         */
        "name"?: string;
        /**
          * Emitted when any checkbox in the group changes
         */
        "onDsChange"?: (event: DsCheckboxGroupCustomEvent<string[]>) => void;
        /**
          * Layout orientation
          * @default 'vertical'
         */
        "orientation"?: 'vertical' | 'horizontal';
        /**
          * If true, at least one checkbox is required
          * @default false
         */
        "required"?: boolean;
    }
    interface DsInput {
        /**
          * Autocomplete attribute
         */
        "autocomplete"?: string;
        /**
          * If true, the input is disabled
          * @default false
         */
        "disabled"?: boolean;
        /**
          * Error message
          * @default ''
         */
        "errorText"?: string;
        /**
          * Help text
          * @default ''
         */
        "helpText"?: string;
        /**
          * Label text
          * @default ''
         */
        "label"?: string;
        /**
          * Maximum length
         */
        "maxlength"?: number;
        /**
          * Minimum length
         */
        "minlength"?: number;
        /**
          * The input name
          * @default ''
         */
        "name"?: string;
        /**
          * Emitted when the input loses focus
         */
        "onDsBlur"?: (event: DsInputCustomEvent<void>) => void;
        /**
          * Emitted when the input value changes and loses focus
         */
        "onDsChange"?: (event: DsInputCustomEvent<string>) => void;
        /**
          * Emitted when the input gains focus
         */
        "onDsFocus"?: (event: DsInputCustomEvent<void>) => void;
        /**
          * Emitted when the input value changes
         */
        "onDsInput"?: (event: DsInputCustomEvent<string>) => void;
        /**
          * Pattern for validation
         */
        "pattern"?: string;
        /**
          * Placeholder text
          * @default ''
         */
        "placeholder"?: string;
        /**
          * If true, the input is readonly
          * @default false
         */
        "readonly"?: boolean;
        /**
          * If true, the input is required
          * @default false
         */
        "required"?: boolean;
        /**
          * The input size
          * @default 'md'
         */
        "size"?: 'sm' | 'md' | 'lg';
        /**
          * The input type
          * @default 'text'
         */
        "type"?: 'text' | 'email' | 'password' | 'number' | 'tel' | 'url' | 'search';
        /**
          * The input value
          * @default ''
         */
        "value"?: string;
    }
    interface DsRadioGroup {
        /**
          * If true, the group is disabled
          * @default false
         */
        "disabled"?: boolean;
        /**
          * Error message
          * @default ''
         */
        "errorText"?: string;
        /**
          * Help text
          * @default ''
         */
        "helpText"?: string;
        /**
          * Label for the group
          * @default ''
         */
        "label"?: string;
        /**
          * Name for all radios in the group
          * @default ''
         */
        "name"?: string;
        /**
          * Emitted when selection changes
         */
        "onDsChange"?: (event: DsRadioGroupCustomEvent<string>) => void;
        /**
          * Layout orientation
          * @default 'vertical'
         */
        "orientation"?: 'vertical' | 'horizontal';
        /**
          * If true, selection is required
          * @default false
         */
        "required"?: boolean;
    }
    interface DsSelect {
        /**
          * If true, the select is disabled
          * @default false
         */
        "disabled"?: boolean;
        /**
          * Error message
          * @default ''
         */
        "errorText"?: string;
        /**
          * Help text
          * @default ''
         */
        "helpText"?: string;
        /**
          * Label text
          * @default ''
         */
        "label"?: string;
        /**
          * If true, allows multiple selections
          * @default false
         */
        "multiple"?: boolean;
        /**
          * The select name
          * @default ''
         */
        "name"?: string;
        /**
          * Emitted when the select loses focus
         */
        "onDsBlur"?: (event: DsSelectCustomEvent<void>) => void;
        /**
          * Emitted when the select value changes
         */
        "onDsChange"?: (event: DsSelectCustomEvent<string>) => void;
        /**
          * Emitted when the select gains focus
         */
        "onDsFocus"?: (event: DsSelectCustomEvent<void>) => void;
        /**
          * Placeholder option text
          * @default ''
         */
        "placeholder"?: string;
        /**
          * If true, the select is required
          * @default false
         */
        "required"?: boolean;
        /**
          * The select value
          * @default ''
         */
        "value"?: string;
    }
    interface DsTextarea {
        /**
          * If true, auto-resize based on content
          * @default false
         */
        "autoResize"?: boolean;
        /**
          * Number of columns
         */
        "cols"?: number;
        /**
          * If true, the textarea is disabled
          * @default false
         */
        "disabled"?: boolean;
        /**
          * Error message
          * @default ''
         */
        "errorText"?: string;
        /**
          * Help text
          * @default ''
         */
        "helpText"?: string;
        /**
          * Label text
          * @default ''
         */
        "label"?: string;
        /**
          * Maximum length
         */
        "maxlength"?: number;
        /**
          * Minimum length
         */
        "minlength"?: number;
        /**
          * The textarea name
          * @default ''
         */
        "name"?: string;
        /**
          * Emitted when the textarea loses focus
         */
        "onDsBlur"?: (event: DsTextareaCustomEvent<void>) => void;
        /**
          * Emitted when the textarea value changes and loses focus
         */
        "onDsChange"?: (event: DsTextareaCustomEvent<string>) => void;
        /**
          * Emitted when the textarea gains focus
         */
        "onDsFocus"?: (event: DsTextareaCustomEvent<void>) => void;
        /**
          * Emitted when the textarea value changes
         */
        "onDsInput"?: (event: DsTextareaCustomEvent<string>) => void;
        /**
          * Placeholder text
          * @default ''
         */
        "placeholder"?: string;
        /**
          * If true, the textarea is readonly
          * @default false
         */
        "readonly"?: boolean;
        /**
          * If true, the textarea is required
          * @default false
         */
        "required"?: boolean;
        /**
          * Number of rows
          * @default 3
         */
        "rows"?: number;
        /**
          * If true, show character counter
          * @default false
         */
        "showCounter"?: boolean;
        /**
          * The textarea value
          * @default ''
         */
        "value"?: string;
    }
    interface IntrinsicElements {
        "ds-button": DsButton;
        "ds-checkbox-group": DsCheckboxGroup;
        "ds-input": DsInput;
        "ds-radio-group": DsRadioGroup;
        "ds-select": DsSelect;
        "ds-textarea": DsTextarea;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "ds-button": LocalJSX.DsButton & JSXBase.HTMLAttributes<HTMLDsButtonElement>;
            "ds-checkbox-group": LocalJSX.DsCheckboxGroup & JSXBase.HTMLAttributes<HTMLDsCheckboxGroupElement>;
            "ds-input": LocalJSX.DsInput & JSXBase.HTMLAttributes<HTMLDsInputElement>;
            "ds-radio-group": LocalJSX.DsRadioGroup & JSXBase.HTMLAttributes<HTMLDsRadioGroupElement>;
            "ds-select": LocalJSX.DsSelect & JSXBase.HTMLAttributes<HTMLDsSelectElement>;
            "ds-textarea": LocalJSX.DsTextarea & JSXBase.HTMLAttributes<HTMLDsTextareaElement>;
        }
    }
}
